# Generated by Django 3.2.8 on 2021-11-13 11:50

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import app.models.user


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_visit', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'app_user',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', app.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Command',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command', models.TextField(blank=True)),
                ('message', models.TextField(blank=True)),
                ('status', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'command',
                'verbose_name_plural': 'commands',
                'db_table': 'app_commands',
            },
        ),
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('chat_id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_name', models.CharField(blank=True, max_length=255)),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('catalog_requests_blocked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'bot user',
                'verbose_name_plural': 'bot users',
                'db_table': 'app_telegram_user',
            },
        ),
        migrations.AddIndex(
            model_name='telegramuser',
            index=models.Index(fields=['user_name'], name='app_telegra_user_na_f5285d_idx'),
        ),
        migrations.AddIndex(
            model_name='telegramuser',
            index=models.Index(fields=['full_name'], name='app_telegra_full_na_ed8b29_idx'),
        ),
        migrations.AddIndex(
            model_name='telegramuser',
            index=models.Index(fields=['created_at'], name='app_telegra_created_54d677_idx'),
        ),
        migrations.AddIndex(
            model_name='telegramuser',
            index=models.Index(fields=['updated_at'], name='app_telegra_updated_fc6ead_idx'),
        ),
        migrations.AddField(
            model_name='command',
            name='user',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='commands', to='app.telegramuser'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='command',
            index=models.Index(fields=['command'], name='app_command_command_79e73b_idx'),
        ),
        migrations.AddIndex(
            model_name='command',
            index=models.Index(fields=['created_at'], name='app_command_created_de19a3_idx'),
        ),
    ]
